#!/usr/bin/env python3

from PIL import Image
import sys
import os
import itertools
import threading
import time

DONE = False


def help():
    help_message = """-e <path-to-image> -m <message-to-encode> :- Encode the text in image.
-d <path-to-image> :- Decodes the Text from the Image and print it out in termianl.
-d <path-to-image> -o <path-to-text-file> :- Decode the Text from the Image and output it in a text file given.
-h or --help :- Prints out a help page in terminal.
inside <use "" if there is space in any args.>
"""
    sys.stdout.write(f"\r{help_message}\n")


def loading_animation():
    global DONE
    spinner = itertools.cycle(["⢿", "⣻", "⣽", "⣾", "⣷", "⣯", "⣟", "⡿"])
    while not DONE:
        sys.stdout.write("\r" + next(spinner) + " Loading")
        sys.stdout.flush()
        time.sleep(0.1)


def to_bin(text: str):
    return "".join([format(ord(char), "08b") for char in text])


def encode(img_path, text, save_name, delimiter: str = "11111110"):
    global DONE
    message = to_bin(text) + delimiter
    image = Image.open(img_path)
    image = image.convert("RGB")
    pixels = list(image.getdata())  # type: ignore
    pixel_len = len(pixels)
    message_len = len(message)

    if message_len > len(pixels) * 3:
        raise ValueError("Image is too small for the message.")

    new_pixels = list()
    message_index = 0
    for pixel in pixels:
        if message_index >= message_len:
            new_pixels.append(pixel)
            continue
        r, g, b = pixel
        if message_index < message_len:
            r = (r & ~1) | int(message[message_index])
            message_index += 1
        if message_index < message_len:
            g = (g & ~1) | int(message[message_index])
            message_index += 1
        if message_index < message_len:
            b = (b & ~1) | int(message[message_index])
            message_index += 1
        new_pixels.append((r, g, b))

    image.putdata(new_pixels)
    image.save(save_name)
    image.close()
    DONE = True


def decode(img_path, delimiter: str = "11111110"):
    global DONE
    image = Image.open(img_path)
    image = image.convert("RGB")
    pixels = list(image.getdata())  # type: ignore
    pixel_len = len(pixels)
    binary_message = ""

    for pixel in pixels:
        r, g, b = pixel
        binary_message += str(r & 1)
        binary_message += str(g & 1)
        binary_message += str(b & 1)

    binary_chars = [binary_message[i : i + 8] for i in range(0, len(binary_message), 8)]
    message = ""
    for binary_char in binary_chars:
        if binary_char == delimiter:
            break
        message += chr(int(binary_char, 2))
    image.close()

    DONE = True
    return message


def main():
    args = sys.argv[1:]
    delimiter = "11111110"
    if args:
        if args[0] == "-e":
            if len(args) >= 3:
                img_path = args[1]
                if args[2] == "-m":
                    spinner_thred = threading.Thread(
                        target=loading_animation, daemon=True
                    )
                    spinner_thred.start()
                    message = args[3]
                    save_name = "encode.png"
                    encode(
                        img_path, text=message, save_name=save_name, delimiter=delimiter
                    )
                    spinner_thred.join()
                    sys.stdout.write(
                        f"\rThe encoded Image saved at <{os.getcwd()+"/"+save_name}>.\n"
                    )
                    sys.path

                else:
                    sys.stdout.write("\rNo Message.")
                    help()
                    sys.exit()
            else:
                sys.stdout.write("\rThere is a missing Arg.")
                help()
                sys.exit()
        elif args[0] == "-d":
            spinner_thred = threading.Thread(target=loading_animation, daemon=True)
            spinner_thred.start()
            message = decode(args[1], delimiter=delimiter)
            spinner_thred.join()
            if len(args) >= 3:
                if args[2] == "-o":
                    with open(args[3], "w") as file:
                        file.write(message)
                else:
                    sys.stdout.write("\rError in Output command.")
                    help()
                    sys.exit()
            else:
                sys.stdout.write(f"\rDecoded Message:- {message}\n")
        elif args[0] in ("-h", "--help"):
            help()
        else:
            help()
            sys.exit()

    else:
        help()
        sys.exit()


main()
