#!/usr/bin/python3

from PIL import Image
import numpy as np


def predict_msb(pixel, left_pixel=None, above_pixel=None):
    """
    Predict the MSB based on neighboring pixels and the current pixel.
    """
    current_msb = pixel[2] >> 7  # Get the MSB of the current pixel

    if left_pixel is not None:
        left_msb = left_pixel[2] >> 7  # Use the left pixel's MSB
        return left_msb if left_msb == current_msb else current_msb
    elif above_pixel is not None:
        above_msb = above_pixel[2] >> 7  # Use the above pixel's MSB
        return above_msb if above_msb == current_msb else current_msb

    return (
        current_msb  # Default to the current pixel's MSB if no neighbors are available
    )


def encode_to_matrix(secret_data):
    """
    Convert secret data to a binary matrix.

    Parameters:
        secret_data (str): The data to be encoded.

    Returns:
        np.ndarray: A binary matrix representation of the secret data.
    """
    secret_data_bin = (
        "".join(format(ord(char), "08b") for char in secret_data) + "11111111"
    )  # Add delimiter
    data_matrix = np.array(list(secret_data_bin), dtype=int).reshape(
        -1, 8
    )  # Reshape into a matrix
    return data_matrix


def encode_image_msb_prediction(image_path, secret_data, output_path):
    """
    Encode secret data into an image using MSB prediction and matrix encoding.
    """
    try:
        img = Image.open(image_path)
    except IOError:
        print("Error: Unable to open image file.")
        return

    encoded_img = img.copy()

    # Convert secret data to a binary matrix
    data_matrix = encode_to_matrix(secret_data)
    data_index = 0
    width, height = img.size

    for y in range(height):
        for x in range(width):
            pixel = list(encoded_img.getpixel((x, y)))
            left_pixel = encoded_img.getpixel((x - 1, y)) if x > 0 else None
            above_pixel = encoded_img.getpixel((x, y - 1)) if y > 0 else None

            predicted_msb = predict_msb(pixel, left_pixel, above_pixel)

            if data_index < data_matrix.size:
                # Embed secret data into the predicted MSB
                pixel[2] = (pixel[2] & ~128) | (data_matrix.flatten()[data_index] << 7)
                encoded_img.putpixel((x, y), tuple(pixel))
                data_index += 1

    encoded_img.save(output_path)


def decode_image_msb_prediction(image_path, output_path):
    """
    Decode secret data from an image encoded using MSB prediction and save the reversed image.
    """
    try:
        img = Image.open(image_path)
    except IOError:
        print("Error: Unable to open image file.")
        return None

    secret_data_bin = ""
    width, height = img.size
    original_img = img.copy()  # Create a copy of the original image

    for y in range(height):
        for x in range(width):
            pixel = img.getpixel((x, y))
            secret_data_bin += str((pixel[2] >> 7) & 1)  # Extract MSB
            if secret_data_bin[-8:] == "11111111":  # Check for delimiter
                break
        else:
            continue
        break

    # Convert binary data to string
    secret_data = "".join(
        chr(int(secret_data_bin[i : i + 8], 2))
        for i in range(0, len(secret_data_bin) - 8, 8)
    )

    # Restore the original image by resetting the MSB of the blue channel
    data_index = 0
    for y in range(height):
        for x in range(width):
            pixel = list(original_img.getpixel((x, y)))
            if data_index < len(secret_data_bin):
                # Reset the MSB to its original state
                pixel[2] = (pixel[2] & ~128) | (0 << 7)  # Clear MSB for original image
                original_img.putpixel((x, y), tuple(pixel))
                data_index += 1

    # Save the restored image
    original_img.save(output_path)

    return secret_data


# Example usage
if __name__ == "__main__":
    input_image = "./fairycore-misty-forest-desktop-wallpaper.png"
    secret_message = "laksdjflkasd fjlk asldkfj las jdflkj aslkdfj"
    encoded_image_file_path = "encoded_image_msb_prediction.png"
    recovered_image_file_path = "recovered_image.png"
    encode_image_msb_prediction(
        input_image,
        secret_message,
        encoded_image_file_path,
    )

    # Decoding
    hidden_message = decode_image_msb_prediction(
        encoded_image_file_path,
        recovered_image_file_path,
    )
    if hidden_message:
        print(f"Hidden Message: {hidden_message}")
